{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftLiftMotor = motor(PORT11, ratio18_1, true);\n\nmotor RightLiftMotor = motor(PORT20, ratio18_1, false);\n\ncontroller Controller1 = controller(primary);\nmotor LeftRearMotor = motor(PORT10, ratio36_1, true);\n\nmotor RightRearMotor = motor(PORT1, ratio36_1, false);\n\nmotor LeftFrontMotor = motor(PORT9, ratio36_1, true);\n\nmotor RightFrontMotor = motor(PORT2, ratio36_1, false);\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n\nfloat abs(float x) {\n    if(x < 0) {\n        return -x;\n    } else {\n        return x;\n    }\n}\n\nfloat constrain(float x, float min, float max) {\n    if(x < min) {\n        return min;\n    } else if(x > max) {\n        return max;\n    } else {\n        return x;\n    }\n}\n\n\nfloat moveMotorTo(motor m, float goal, float forceScale, float maxVolts=12) {\n    float delta = goal - m.position(turns);\n    float volts = constrain(delta * forceScale, -maxVolts, maxVolts);\n\n    m.spin(forward, volts, volt);\n    return volts;\n}\n\nclass MotorController {\n    public:\n        motor m;\n\n        float goal;\n        float forceScale = 20;\n        float maxVolts = 12;\n\n        MotorController(motor m): m(m) {\n            this->goal = this->m.position(turns);\n        }\n\n        void update() {\n            moveMotorTo(this->m, this->goal, this->forceScale, this->maxVolts);\n        }\n};\n\nclass PairedMotorController {\n    public:\n        motor m1;\n        motor m2;\n\n        float goal;\n        float forceScale = 20;\n        float maxVolts = 12;\n\n        PairedMotorController(motor m1, motor m2): m1(m1), m2(m2) {\n            this->goal = (m1.position(turns) + m2.position(turns)) / 2;\n        }\n\n        void update() {\n            moveMotorTo(this->m1, this->goal, this->forceScale, this->maxVolts);\n            moveMotorTo(this->m2, this->goal, this->forceScale, this->maxVolts);\n        }\n};\n\n\nclass Button {\n    PairedMotorController l;\n    PairedMotorController r;\n    float lScale;\n    float rScale;\n\n    Button(PairedMotorController l, PairedMotorController r, float lScale=1, float rScale=1):\n        l(l), r(r), lScale(lScale), rScale(rScale) {}\n\n    void callback() {\n        this->l.goal += this->lScale;\n        this->r.goal += this->rScale;\n    }\n\n    // int* getCallback()\n};\n\n\n// void upButton(PairedMotorController l, PairedMotorController r) {l.goal += 1; r.goal += 1;}\n// void downButton(PairedMotorController l, PairedMotorController r) {l.goal -= 1; r.goal -= 1;}\n// void leftButton(PairedMotorController l, PairedMotorController r) {l.goal -= 1; r.goal += 1;}\n// void rightButton(PairedMotorController l, PairedMotorController r) {l.goal += 1; r.goal -= 1;}\n\n\nint main() {\n    // wait for rotation sensor to fully initialize\n    wait(30, msec);\n\n    PairedMotorController lift(LeftLiftMotor, RightLiftMotor);\n    // lift.maxVolts = \n\n    PairedMotorController leftWheels(LeftRearMotor, LeftFrontMotor);\n    PairedMotorController rightWheels(RightRearMotor, RightFrontMotor);\n    leftWheels.maxVolts = 4;\n    rightWheels.maxVolts = 4;\n\n    // lift.goal = 1;\n\n\n    // Button upButton(leftWheels, rightWheels);\n\n    // Controller1.ButtonUp.pressed(upButton.callback);\n\n\n    // Controller1.ButtonUp.pressed(upButton(leftWheels, rightWheels));\n    // Controller1.ButtonDown.pressed(void() {leftWheels.goal -= 1; rightWheels.goal -= 1;});\n    // Controller1.ButtonLeft.pressed(void() {leftWheels.goal -= 1; rightWheels.goal += 1;});\n    // Controller1.ButtonRight.pressed(void() {leftWheels.goal += 1; rightWheels.goal -= 1;});\n\n\n    while(true) {\n        if(Controller1.ButtonR1.pressing()) {lift.goal += 0.01;}\n        if(Controller1.ButtonR2.pressing()) {lift.goal -= 0.01;}\n        if(Controller1.ButtonX.pressing()) {lift.goal = 1.5;}\n        if(Controller1.ButtonY.pressing()) {lift.goal = 1;}\n        if(Controller1.ButtonA.pressing()) {lift.goal = 0.5;}\n        if(Controller1.ButtonB.pressing()) {lift.goal = 0;}\n        lift.goal = constrain(lift.goal, 0, 1.5);\n\n\n        // Note: this is not good, responsive user drive code\n        // this is just a way to test auton movement, via the controller\n        // if the wheels get behind where they should be, they will speed up\n        // user control should link the axis to the voltage applied\n\n        // leftWheels.goal += Controller1.Axis3.position() / 100;\n        // rightWheels.goal += Controller1.Axis2.position() / 100;\n        // if(Controller1.ButtonUp.pressing()) {leftWheels.goal += 1; rightWheels.goal += 1;}\n        // if(Controller1.ButtonDown.pressing()) {leftWheels.goal -= 1; rightWheels.goal -= 1;}\n        // if(Controller1.ButtonLeft.pressing()) {leftWheels.goal -= 1; rightWheels.goal += 1;}\n        // if(Controller1.ButtonRight.pressing()) {leftWheels.goal += 1; rightWheels.goal -= 1;}\n\n\n        float l = Controller1.Axis3.position() + Controller1.Axis4.position();\n        float r = Controller1.Axis3.position() - Controller1.Axis4.position();\n\n        l /= 8;\n        r /= 8;\n\n        l = constrain(l, -12, 12);\n        r = constrain(r, -12, 12);\n\n        l *= 1 - (lift.goal / 1.5 * 0.65);\n        r *= 1 - (lift.goal / 1.5 * 0.65);\n\n        LeftFrontMotor.spin(forward, l, volt);\n        LeftRearMotor.spin(forward, l, volt);\n        RightFrontMotor.spin(forward, r, volt);\n        RightRearMotor.spin(forward, r, volt);\n\n\n        lift.update();\n        // leftWheels.update();\n        // rightWheels.update();\n\n        wait(5, msec);\n    }\n}","textLanguage":"cpp","rconfig":[{"port":[11],"name":"LeftLiftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"RightLiftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[10],"name":"LeftRearMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[1],"name":"RightRearMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[9],"name":"LeftFrontMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[2],"name":"RightFrontMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}
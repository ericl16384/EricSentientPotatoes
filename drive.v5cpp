{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftLiftMotor = motor(PORT19, ratio18_1, false);\n\nmotor RightLiftMotor = motor(PORT20, ratio18_1, true);\n\ncontroller Controller1 = controller(primary);\nmotor LeftRearMotor = motor(PORT3, ratio36_1, true);\n\nmotor RightRearMotor = motor(PORT9, ratio36_1, false);\n\nmotor LeftFrontMotor = motor(PORT1, ratio36_1, true);\n\nmotor RightFrontMotor = motor(PORT10, ratio36_1, false);\n\nmotor ClampMotor = motor(PORT11, ratio18_1, true);\n\nmotor ElevatorMotor = motor(PORT8, ratio18_1, false);\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n\nfloat abs(float x) {\n    if(x < 0) {\n        return -x;\n    } else {\n        return x;\n    }\n}\n\nfloat constrain(float x, float min, float max) {\n    if(x < min) {\n        return min;\n    } else if(x > max) {\n        return max;\n    } else {\n        return x;\n    }\n}\n\n\nfloat moveMotorTo(motor m, float goal, float forceScale, float maxVolts=12) {\n    float delta = goal - m.position(turns);\n    float volts = constrain(delta * forceScale, -maxVolts, maxVolts);\n\n    m.spin(forward, volts, volt);\n    return volts;\n}\n\nstruct MotorController {\n    motor m;\n\n    float goal;\n    float forceScale = 20;\n    float maxVolts = 12;\n\n    MotorController(motor m): m(m) {\n        this->goal = this->m.position(turns);\n    }\n\n    void update() {\n        moveMotorTo(this->m, this->goal, this->forceScale, this->maxVolts);\n    }\n};\n\nstruct PairedMotorController {\n    motor m1;\n    motor m2;\n\n    float goal;\n    float forceScale = 20;\n    float maxVolts = 12;\n\n    PairedMotorController(motor m1, motor m2): m1(m1), m2(m2) {\n        this->goal = (m1.position(turns) + m2.position(turns)) / 2;\n    }\n\n    void update() {\n        moveMotorTo(this->m1, this->goal, this->forceScale, this->maxVolts);\n        moveMotorTo(this->m2, this->goal, this->forceScale, this->maxVolts);\n    }\n};\n\n\nPairedMotorController liftArms(LeftLiftMotor, RightLiftMotor);\nMotorController clamp(ClampMotor);\n\n\nint main() {\n    liftArms.forceScale = 50;\n    clamp.forceScale = 100;\n\n    while(true) {\n        ElevatorMotor.spin(forward, 12, volt);\n        \n\n        if(Controller1.ButtonR1.pressing()) {liftArms.goal += 0.005;}\n        if(Controller1.ButtonR2.pressing()) {liftArms.goal -= 0.005;}\n        // if(Controller1.ButtonX.pressing()) {liftArms.goal = 1.5;}\n        // if(Controller1.ButtonY.pressing()) {liftArms.goal = 1;}\n        // if(Controller1.ButtonA.pressing()) {liftArms.goal = 0.5;}\n        // if(Controller1.ButtonB.pressing()) {liftArms.goal = 0.2;}\n        // liftArms.goal = constrain(liftArms.goal, 0, 1.5);\n        liftArms.goal = constrain(liftArms.goal, 0, 0.75);\n\n        if(Controller1.ButtonL2.pressing()) {clamp.goal = 1;}\n        if(Controller1.ButtonL1.pressing()) {clamp.goal = -1;}\n\n\n        float l = Controller1.Axis3.position() + Controller1.Axis1.position();\n        float r = Controller1.Axis3.position() - Controller1.Axis1.position();\n\n        l /= 8;\n        r /= 8;\n\n        l = constrain(l, -12, 12);\n        r = constrain(r, -12, 12);\n\n        l *= 1 - (liftArms.goal / 1.5 * 0.65);\n        r *= 1 - (liftArms.goal / 1.5 * 0.65);\n\n        if(liftArms.goal < 0.2) {\n            l /= 4;\n            r /= 4;\n        }\n\n        LeftFrontMotor.spin(forward, l, volt);\n        LeftRearMotor.spin(forward, l, volt);\n        RightFrontMotor.spin(forward, r, volt);\n        RightRearMotor.spin(forward, r, volt);\n\n\n        liftArms.update();\n        clamp.update();\n\n        wait(5, msec);\n    }\n}","textLanguage":"cpp","rconfig":[{"port":[19],"name":"LeftLiftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"RightLiftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[3],"name":"LeftRearMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[9],"name":"RightRearMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[1],"name":"LeftFrontMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[10],"name":"RightFrontMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[11],"name":"ClampMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"ElevatorMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}
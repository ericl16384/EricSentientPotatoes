{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftLiftMotor = motor(PORT11, ratio18_1, true);\n\nmotor RightLiftMotor = motor(PORT20, ratio18_1, false);\n\ncontroller Controller1 = controller(primary);\nmotor LeftRearMotor = motor(PORT10, ratio36_1, true);\n\nmotor RightRearMotor = motor(PORT1, ratio36_1, false);\n\nmotor LeftFrontMotor = motor(PORT9, ratio36_1, true);\n\nmotor RightFrontMotor = motor(PORT2, ratio36_1, false);\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n\nfloat abs(float x) {\n    if(x < 0) {\n        return -x;\n    } else {\n        return x;\n    }\n}\n\nfloat constrain(float x, float min, float max) {\n    if(x < min) {\n        return min;\n    } else if(x > max) {\n        return max;\n    } else {\n        return x;\n    }\n}\n\n\nfloat moveMotorTo(motor m, float goal, float forceScale, float maxVolts=12) {\n    float delta = goal - m.position(turns);\n    float volts = constrain(delta * forceScale, -maxVolts, maxVolts);\n\n    m.spin(forward, volts, volt);\n    return volts;\n}\n\nstruct MotorController {\n    motor m;\n\n    float goal;\n    float forceScale = 20;\n    float maxVolts = 12;\n\n    MotorController(motor m): m(m) {\n        this->goal = this->m.position(turns);\n    }\n\n    void update() {\n        moveMotorTo(this->m, this->goal, this->forceScale, this->maxVolts);\n    }\n};\n\nstruct PairedMotorController {\n    motor m1;\n    motor m2;\n\n    float goal;\n    float forceScale = 20;\n    float maxVolts = 12;\n\n    PairedMotorController(motor m1, motor m2): m1(m1), m2(m2) {\n        this->goal = (m1.position(turns) + m2.position(turns)) / 2;\n    }\n\n    void update() {\n        moveMotorTo(this->m1, this->goal, this->forceScale, this->maxVolts);\n        moveMotorTo(this->m2, this->goal, this->forceScale, this->maxVolts);\n    }\n};\n\n\nPairedMotorController liftArms(LeftLiftMotor, RightLiftMotor);\n\nPairedMotorController leftWheels(LeftRearMotor, LeftFrontMotor);\nPairedMotorController rightWheels(RightRearMotor, RightFrontMotor);\n\n\nstruct ScheduledGoal {\n    float t;\n    float l;\n    float r;\n    float lift;\n\n    bool armed = true;\n\n    ScheduledGoal(float t, float l, float r, float lift=-1): t(t), l(l), r(r), lift(lift) {}\n\n    void update() {\n        if(this->armed && Brain.Timer.time(seconds) >= this->t) {\n            this->armed = false;\n\n            leftWheels.goal = this->l;\n            rightWheels.goal = this->r;\n            if(lift != -1) {\n                liftArms.goal = this->lift;\n            }\n        }\n    }\n};\n// ScheduledGoal moveForward(float t, float x=1) {return ScheduledGoal(t, x/18, x/18);};\n// ScheduledGoal moveBackward(float t, float x=1) {return ScheduledGoal(t, -x/18, -x/18);};\n// ScheduledGoal turnLeft(float t, float x=1) {return ScheduledGoal(t, -x*0.75, x*0.75);};\n// ScheduledGoal turnRight(float t, float x=1) {return ScheduledGoal(t, x*0.75, -x*0.75);};\n\n\nint main() {\n    leftWheels.maxVolts = 6;\n    rightWheels.maxVolts = 6;\n\n    leftWheels.forceScale = 500;\n    rightWheels.forceScale = 500;\n\n\n    ScheduledGoal schedule[] = {\n        // ScheduledGoal(2, 1, 1),\n        // ScheduledGoal(4, 2, 2),\n        // ScheduledGoal(6, 0, 0),\n        // ScheduledGoal(8, 2, 2),\n        // ScheduledGoal(10, 3, 1),\n        // ScheduledGoal(12, 5, 3),\n        // ScheduledGoal(14, 3, 1),\n        // ScheduledGoal(16, 2, 2),\n        // ScheduledGoal(18, 0, 0),\n\n        // ScheduledGoal(2, 0.75, -0.75),\n\n        // ScheduledGoal(2, 1, 1)\n\n        // moveForward(2, 1),\n        // moveBackward(4, 1),\n\n\n        // Comp left\n\n        // ScheduledGoal(0, 0.7, -0.7, 0.5),\n        // ScheduledGoal(2, 0.7 + 1, -0.7 + 1),\n        // ScheduledGoal(4, 0.7 + 1, -0.7 + 1, 0),\n        // ScheduledGoal(6, 0.7, -0.7),\n        // ScheduledGoal(8, 0, 0, 0),\n\n\n        // Auton\n\n        ScheduledGoal(0, 3, 3),\n        ScheduledGoal(4, 3, 3, 0.25),\n        ScheduledGoal(5, 0, 0),\n        ScheduledGoal(9, 0.5, -0.5),\n        ScheduledGoal(10, 0.5, -0.5, 0),\n        ScheduledGoal(11, 0, 0),\n        ScheduledGoal(12, 1.5, 1.5),\n        ScheduledGoal(14, 1.125, 1.875),\n        ScheduledGoal(15, 3.125, 3.875),\n        ScheduledGoal(17, 1.125, 1.875),\n    };\n\n\n    while(true) {\n        for(int i=0; i<10; i++) {\n            schedule[i].update();\n        }\n\n\n        liftArms.update();\n        leftWheels.update();\n        rightWheels.update();\n\n        wait(5, msec);\n    }\n}","textLanguage":"cpp","rconfig":[{"port":[11],"name":"LeftLiftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"RightLiftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[10],"name":"LeftRearMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[1],"name":"RightRearMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[9],"name":"LeftFrontMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[2],"name":"RightFrontMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22}],"slot":3,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}
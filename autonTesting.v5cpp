{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftLiftMotor = motor(PORT11, ratio18_1, true);\n\nmotor RightLiftMotor = motor(PORT20, ratio18_1, false);\n\ncontroller Controller1 = controller(primary);\nmotor LeftRearMotor = motor(PORT10, ratio36_1, true);\n\nmotor RightRearMotor = motor(PORT1, ratio36_1, false);\n\nmotor LeftFrontMotor = motor(PORT9, ratio36_1, true);\n\nmotor RightFrontMotor = motor(PORT2, ratio36_1, false);\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n\nfloat abs(float x) {\n    if(x < 0) {\n        return -x;\n    } else {\n        return x;\n    }\n}\n\nfloat constrain(float x, float min, float max) {\n    if(x < min) {\n        return min;\n    } else if(x > max) {\n        return max;\n    } else {\n        return x;\n    }\n}\n\nbool within(float x, float min, float max) {\n    if(x < min) {\n        return false;\n    } else if(x > max) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nbool threshold(float x, float goal, float tolerance) {\n    return within(x, goal - tolerance, goal + tolerance);\n}\n\n\nfloat moveMotorTo(motor m, float goal, float forceScale, float maxVolts=12) {\n    float delta = goal - m.position(turns);\n    float volts = constrain(delta * forceScale, -maxVolts, maxVolts);\n\n    m.spin(forward, volts, volt);\n    return volts;\n}\n\nstruct MotorController {\n    motor m;\n\n    float goal;\n    float forceScale = 20;\n    float maxVolts = 12;\n\n    MotorController(motor m): m(m) {\n        this->goal = this->m.position(turns);\n    }\n\n    void update() {\n        moveMotorTo(this->m, this->goal, this->forceScale, this->maxVolts);\n    }\n\n    bool inThreshold(float tolerance) {\n        if(!threshold(this->m.position(turns), this->goal, tolerance)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n};\n\nstruct PairedMotorController {\n    motor m1;\n    motor m2;\n\n    float goal;\n    float forceScale = 20;\n    float maxVolts = 12;\n\n    PairedMotorController(motor m1, motor m2): m1(m1), m2(m2) {\n        this->goal = (m1.position(turns) + m2.position(turns)) / 2;\n    }\n\n    void update() {\n        moveMotorTo(this->m1, this->goal, this->forceScale, this->maxVolts);\n        moveMotorTo(this->m2, this->goal, this->forceScale, this->maxVolts);\n    }\n\n    bool inThreshold(float tolerance) {\n        if(!threshold(this->m1.position(turns), this->goal, tolerance)) {\n            return false;\n        } else if(!threshold(this->m2.position(turns), this->goal, tolerance)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n};\n\n\nPairedMotorController liftArms(LeftLiftMotor, RightLiftMotor);\nPairedMotorController leftWheels(LeftRearMotor, LeftFrontMotor);\nPairedMotorController rightWheels(RightRearMotor, RightFrontMotor);\n\n\nstruct AutonomousAction {\n    float liftGoal=0, leftGoal=0, rightGoal=0;\n    bool liftRelative=false, leftRelative=true, rightRelative=true;\n\n    float minTime=4;\n    // float tolerance = 0.01;\n    float tolerance = 0;\n\n    // AutonomousAction(\n    //     float liftGoal, float leftGoal, float rightGoal,\n    //     bool liftRelative=true, bool leftRelative=true,  bool rightRelative=true,\n    //     float minTime=0\n    // )\n    // AutonomousAction() {}\n    // AutonomousAction(AutonomousAction previous) {\n    //     this->liftGoal = previous.liftGoal;\n    //     this->leftGoal = previous.leftGoal;\n    //     this->rightGoal = previous.rightGoal;\n\n    //     this->liftRelative = previous.liftRelative;\n    //     this->leftRelative = previous.leftRelative;\n    //     this->rightRelative = previous.rightRelative;\n\n    //     this->minTime = previous.minTime;\n    // } \n\n    void apply() {\n        if(this->liftRelative) {\n            liftArms.goal += this->liftGoal;\n        } else {\n            liftArms.goal = this->liftGoal;\n        }\n\n        if(this->leftRelative) {\n            leftWheels.goal += this->leftGoal;\n        } else {\n            leftWheels.goal = this->leftGoal;\n        }\n\n        if(this->rightRelative) {\n            rightWheels.goal += this->rightGoal;\n        } else {\n            rightWheels.goal = this->rightGoal;\n        }\n    }\n\n    bool done() {\n        if(!liftArms.inThreshold(this->tolerance)) {\n            return false;\n        } else if(!leftWheels.inThreshold(this->tolerance)) {\n            return false;\n        } else if(!rightWheels.inThreshold(this->tolerance)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n};\n\nstruct Autonomous {\n    AutonomousAction actions[1024];\n    int actionsLength = 0;\n\n    int currentAction = -1;\n    float actionStart = 0;\n    float actionEnd = 0;\n\n    void addAction(AutonomousAction action) {\n        this->actions[this->actionsLength] = action;\n        this->actionsLength++;\n    }\n\n    void startNextAction() {\n        if(this->currentAction < this->actionsLength) {\n            this->currentAction++;\n            this->actionStart = Brain.Timer.time(seconds);   \n            this->actionEnd = this->actionStart + this->actions[this->currentAction].minTime;\n            this->actions[this->currentAction].apply();\n        }\n    }\n\n    void update() {\n        if(Brain.Timer.time(seconds) >= this->actionEnd || this->actions[this->currentAction].done()) {\n            this->startNextAction();\n        }\n    }\n\n\n    void addMove(float dist) {\n        AutonomousAction action;\n        action.leftGoal = dist;\n        action.rightGoal = dist;\n        this->addAction(action);\n    }\n\n    // replace amt with theta, when I figure out the relationship\n    // between the amt and theta\n    void addTurn(float amt) {\n        AutonomousAction action;\n        action.leftGoal = -amt;\n        action.rightGoal = amt;\n        this->addAction(action);\n    }\n\n    void addLift(float goal) {\n        AutonomousAction action;\n        action.liftGoal = goal;\n        this->addAction(action);\n    }\n};\n\n\nint main() {\n    Autonomous auton;\n\n    auton.addMove(3);\n    auton.addLift(0.25);\n    auton.addMove(-3);\n    auton.addTurn(-0.5);\n    auton.addLift(0);\n    auton.addTurn(0.5);\n    auton.addMove(1.5);\n    auton.addTurn(0.125);\n    auton.addMove(2);\n    // not yet tested in any way\n    auton.addLift(0.5);\n    auton.addMove(-2);\n    auton.addTurn(-0.125);\n    auton.addMove(-1.5);\n\n\n    // replace with Competition callbacks\n    bool driveMode = true;\n\n    while(true) {\n        if(Controller1.ButtonL1.pressing()) {driveMode = false;}\n        if(Controller1.ButtonL2.pressing()) {driveMode = true;}\n\n\n        if(driveMode) {\n            if(Controller1.ButtonR1.pressing()) {liftArms.goal += 0.01;}\n            if(Controller1.ButtonR2.pressing()) {liftArms.goal -= 0.01;}\n            if(Controller1.ButtonX.pressing()) {liftArms.goal = 1.5;}\n            if(Controller1.ButtonY.pressing()) {liftArms.goal = 1;}\n            if(Controller1.ButtonA.pressing()) {liftArms.goal = 0.5;}\n            if(Controller1.ButtonB.pressing()) {liftArms.goal = 0;}\n            liftArms.goal = constrain(liftArms.goal, 0, 1.5);\n\n            float l = Controller1.Axis3.position() + Controller1.Axis4.position();\n            float r = Controller1.Axis3.position() - Controller1.Axis4.position();\n\n            l /= 8;\n            r /= 8;\n\n            l = constrain(l, -12, 12);\n            r = constrain(r, -12, 12);\n\n            l *= 1 - (liftArms.goal / 1.5 * 0.65);\n            r *= 1 - (liftArms.goal / 1.5 * 0.65);\n\n            LeftFrontMotor.spin(forward, l, volt);\n            LeftRearMotor.spin(forward, l, volt);\n            RightFrontMotor.spin(forward, r, volt);\n            RightRearMotor.spin(forward, r, volt);\n        } else {\n            auton.update();\n        }\n\n\n        liftArms.update();\n        if(!driveMode) {\n            leftWheels.update();\n            rightWheels.update();\n        }\n\n        wait(5, msec);\n    }\n}","textLanguage":"cpp","rconfig":[{"port":[11],"name":"LeftLiftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"RightLiftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[10],"name":"LeftRearMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[1],"name":"RightRearMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[9],"name":"LeftFrontMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[2],"name":"RightFrontMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22}],"slot":7,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}
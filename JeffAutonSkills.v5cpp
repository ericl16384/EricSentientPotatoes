{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT1, ratio18_1, false);\nmotor leftMotorB = motor(PORT3, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT9, ratio18_1, true);\nmotor rightMotorB = motor(PORT10, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ninertial DrivetrainInertial = inertial(PORT15);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 1);\n\ncontroller Controller1 = controller(primary);\nmotor LeftLiftMotor = motor(PORT19, ratio18_1, false);\n\nmotor RightLiftMotor = motor(PORT20, ratio18_1, true);\n\nmotor ClampMotor = motor(PORT11, ratio18_1, true);\n\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n#include \"vex.h\"\n#include <cmath>\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\nfloat abs(float x) {\n    if(x < 0) {\n        return -x;\n    } else {\n        return x;\n    }\n}\n\nbool within(float x, float min, float max) {\n    if(x < min) {\n        return false;\n    } else if(x > max) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfloat constrain(float x, float min, float max) {\n    if(x < min) {\n        return min;\n    } else if(x > max) {\n        return max;\n    } else {\n        return x;\n    }\n}\n\nbool threshold(float x, float goal, float tolerance) {\n    return within(x, goal - tolerance, goal + tolerance);\n}\n\n\nfloat moveMotorTo(motor m, float goal, float forceScale, float maxVolts=12) {\n    float delta = goal - m.position(turns);\n    float volts = constrain(delta * forceScale, -maxVolts, maxVolts);\n\n    m.spin(forward, volts, volt);\n    return volts;\n}\n\nstruct MotorController {\n    motor m;\n\n    float goal;\n    float forceScale = 20;\n    float maxVolts = 12;\n\n    MotorController(motor m): m(m) {\n        this->goal = this->m.position(turns);\n    }\n\n    void update() {\n        moveMotorTo(this->m, this->goal, this->forceScale, this->maxVolts);\n    }\n\n    bool inThreshold(float tolerance) {\n        if(!threshold(this->m.position(turns), this->goal, tolerance)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n};\n\nstruct PairedMotorController {\n    motor m1;\n    motor m2;\n\n    float goal;\n    float forceScale = 20;\n    float maxVolts = 12;\n\n    PairedMotorController(motor m1, motor m2): m1(m1), m2(m2) {\n        this->goal = (m1.position(turns) + m2.position(turns)) / 2;\n    }\n\n    void update() {\n        moveMotorTo(this->m1, this->goal, this->forceScale, this->maxVolts);\n        moveMotorTo(this->m2, this->goal, this->forceScale, this->maxVolts);\n    }\n\n    bool inThreshold(float tolerance) {\n        if(!threshold(this->m1.position(turns), this->goal, tolerance)) {\n            return false;\n        } else if(!threshold(this->m2.position(turns), this->goal, tolerance)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n};\n\n\nPairedMotorController liftArms(LeftLiftMotor, RightLiftMotor);\nMotorController clamp(ClampMotor);\n\n\n\n\nvoid enableAuton() {\n    RemoteControlCodeEnabled = false;\n    // leftWheels.maxVolts = 6;\n    // rightWheels.maxVolts = 6;\n}\nvoid enableDrive() {\n    RemoteControlCodeEnabled = true;\n    // leftWheels.maxVolts = 12;\n    // rightWheels.maxVolts = 12;\n}\n\n\n//these are for the raduis of the robot and two angles. \n//These are just so if the size of the bot changes, you just have to change r (radius). \n// \nfloat r = 8;\nfloat h = sqrt(1253.16+pow((39.2-2*r),2));\nfloat theta = asin(35.4/h);\n\n// \"when started\" hat block\nint whenStarted1() {\n  return 0;\n}\n\n\n//all the movement\nint main() {\n    calibrateDrivetrain();\n    Drivetrain.turnFor(right, 45, degrees);\n    wait(1000,msec);\n    Drivetrain.driveFor(forward, 58.9-r, inches);\n    // lift the goal\n    Drivetrain.driveFor(forward, r, inches);\n    Drivetrain.turnFor(right, 45, degrees);\n    Drivetrain.driveFor(forward, 49.92, inches); \n    Drivetrain.turnFor(left, 45, degrees);\n    Drivetrain.driveFor(forward, 5-r, inches); \n    //drop goal and bring lift down\n    Drivetrain.driveFor(reverse, 5-r, inches);\n    Drivetrain.turnFor(right, 180, degrees);\n    Drivetrain.driveFor(forward, 40.2-2*r, inches);\n    //lift goal\n    Drivetrain.driveFor(forward, 51.4, inches);\n    //fully lift and drop goal\n    Drivetrain.turnFor(left, 180-theta, degrees);\n    Drivetrain.driveFor(forward, h, inches);\n    Drivetrain.turnFor(left, theta, degrees);\n    //lift goal\n    Drivetrain.driveFor(forward, 6.1+r, inches);\n    Drivetrain.turnFor(left, 45.16, degrees);\n    Drivetrain.driveFor(forward, 49.92, inches);\n    Drivetrain.turnFor(right, 45.16, degrees);\n    Drivetrain.driveFor(forward, 5-r, inches);\n    //drop goal\n\n\n    //gap\n\n\n    Drivetrain.driveFor(forward, 87.42, inches);\n    Drivetrain.turnFor(right, 60.3, degrees);\n    Drivetrain.driveFor(forward, 20.15-r, inches);\n    //drop goal\n    Drivetrain.turnFor(left, 150.2, degrees);\n    Drivetrain.driveFor(forward, 46.9-r, inches);\n    Drivetrain.turnFor(left, 90, degrees);\n    Drivetrain.driveFor(forward, 115, inches);\n}\n\n\n//Austin, I want't sure how the lift is meant to be coded. I just left what is supposed to happen in comments.\n// Me and Eric can probobly add in that stuff relatively quickly. The gap is just a small part of the movemenst.\n// I need to see the feild and test before I can code that. If you put in the variables, it should work.","textLanguage":"cpp","rconfig":[{"port":[1,3,9,10,15],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[19],"name":"LeftLiftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[20],"name":"RightLiftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[11],"name":"ClampMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}
{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT9, ratio18_1, false);\nmotor leftMotorB = motor(PORT10, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT2, ratio18_1, true);\nmotor rightMotorB = motor(PORT1, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ngps DrivetrainGPS = gps(PORT20, 0.00, 0.00, mm, 180);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainGPS, 319.19, 320, 40, mm, 1);\n\ngps GPS3 = gps(PORT3, 0.00, 0.00, mm, 180);\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"GPS\");\n  DrivetrainGPS.calibrate();\n  while (DrivetrainGPS.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n#pragma endregion VEXcode Generated Robot Configuration\n\n#include \"vex.h\"\n#include <cmath>\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n\n//these are for the raduis of the robot and two angles. \n//These are just so if the size of the bot changes, you just have to change r (radius). \n// \nfloat r = 8;\n\n//# define drive(x) Drivetrain.driveFor(forward, x, inches)\n//# define turn(x)\n\n//all the movement\nint main() {\n    Drivetrain.driveFor(forward, 23.5 - r, inches);\n    // grab\n    Drivetrain.driveFor(reverse, 23.5 - r, inches);\n\n    Drivetrain.turnFor(left, 90, degrees);\n    Drivetrain.driveFor(forward, 58.9, inches);\n\n    Drivetrain.turnFor(right, 33.58, degrees);\n    Drivetrain.driveFor(forward, 42.49, inches);\n    // drop\n\n    Drivetrain.turnFor(left, 123.58, degrees);\n    Drivetrain.driveFor(forward, 7 - r, inches);\n    // grab to storage\n    Drivetrain.driveFor(forward, 6.49 + r, inches);\n\n    Drivetrain.turnFor(left, 90, degrees);\n    Drivetrain.driveFor(forward, 35.4, inches);\n\n    Drivetrain.turnFor(left, 90, degrees);\n    Drivetrain.driveFor(forward, 17 - r, inches);\n    // grab to storage\n    Drivetrain.driveFor(forward, 35.3, inches);\n    // grab to storage\n    Drivetrain.driveFor(forward, 36, inches);\n    // grab to storage\n    Drivetrain.driveFor(forward, 6.49 + r, inches);\n\n    Drivetrain.turnFor(right, 90, degrees);\n    Drivetrain.driveFor(forward, 58.9, inches);\n\n    Drivetrain.turnFor(right, 90, degrees);\n    // will need to pull the ramp down\n    Drivetrain.driveFor(forward, 35.4, inches);\n}\n\n\n//Austin, I want't sure how the lift is meant to be coded. I just left what is supposed to happen in comments.\n// Me and Eric can probobly add in that stuff relatively quickly. The gap is just a small part of the movemenst.\n// I need to see the feild and test before I can code that. If you put in the variables, it should work.","textLanguage":"cpp","rconfig":[{"port":[9,10,2,1,20],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"gps","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[3],"name":"GPS3","customName":false,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"}}],"slot":7,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}
{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftMotor = motor(PORT11, ratio18_1, false);\n\nmotor RightMotor = motor(PORT20, ratio18_1, true);\n\ncontroller Controller1 = controller(primary);\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n\nfloat abs(float x) {\n    if(x < 0) {\n        return -x;\n    } else {\n        return x;\n    }\n}\n\nfloat constrain(float x, float min, float max) {\n    if(x < min) {\n        return min;\n    } else if(x > max) {\n        return max;\n    } else {\n        return x;\n    }\n}\n\n\nfloat moveMotorTo(motor m, float goal, float forceScale, float maxVolts=12) {\n    float delta = goal - m.position(turns);\n    float volts = constrain(delta * forceScale, -maxVolts, maxVolts);\n\n    m.spin(forward, volts, volt);\n    return volts;\n}\n\nclass MotorController {\n    public:\n        motor m;\n\n        float goal;\n        float forceScale = 20;\n        float maxVolts = 12;\n\n        MotorController(motor m): m(m) {\n            this->goal = this->m.position(turns);\n        }\n\n        void update() {\n            moveMotorTo(this->m, this->goal, this->forceScale, this->maxVolts);\n        }\n};\n\nclass PairedMotorController {\n    public:\n        motor m1;\n        motor m2;\n\n        float goal;\n        float forceScale = 20;\n        float maxVolts = 12;\n\n        PairedMotorController(motor m1, motor m2): m1(m1), m2(m2) {\n            this->goal = (m1.position(turns) + m2.position(turns)) / 2;\n        }\n\n        void update() {\n            moveMotorTo(this->m1, this->goal, this->forceScale, this->maxVolts);\n            moveMotorTo(this->m2, this->goal, this->forceScale, this->maxVolts);\n        }\n};\n\n\nint main() {\n    // wait for rotation sensor to fully initialize\n    wait(30, msec);\n\n    PairedMotorController lift(LeftMotor, RightMotor);\n\n    lift.goal = 1;\n\n    while(true) {\n        if(Controller1.ButtonR1.pressing()) {lift.goal += 0.01;}\n        if(Controller1.ButtonR2.pressing()) {lift.goal -= 0.01;}\n        if(Controller1.ButtonB.pressing()) {lift.goal = 0;}\n        if(Controller1.ButtonA.pressing()) {lift.goal = 0.5;}\n        if(Controller1.ButtonY.pressing()) {lift.goal = 1;}\n        if(Controller1.ButtonX.pressing()) {lift.goal = 1.5;}\n\n        lift.update();\n\n        wait(5, msec);\n    }\n}","textLanguage":"cpp","rconfig":[{"port":[11],"name":"LeftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"RightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}